{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Ansible-mdgen is a python package used to auto generate documentation for an ansible role. It is a highly configurable tool and uses mdUtils to create the .md files. How does it work? The package reads all tasks, handlers, defaults, variables, files and templates and produces equivalent .md files in the docs directory of the role. It also allows you to configure it so that you can combine tasks, variables, templates, etc... into single .md files. If the docs directory does not exist then it will be created. Tasks The package iterates over each of the tasks files, parsing the yaml to extract the \"name\" values and \"tags\" values from each task and writes it to the .md file. So good descriptions on the task names will lead to better documentation. The package also generates a flow graph based on the include_tasks and import_tasks. This is useful in particular for larger roles to see the picture of how various task files are tied together. Variables The package iterates over all variables in the defaults and vars directories. To provide descriptions of the variables you can add the \"@var:\" annotation in the comment above the variable: # @var: <variable_name>: <variable_description> For example: # @var: my_var: This is a description of my variable! The package also identifies where the variable is used in the role and this is displayed under the \"Where referenced\" section under each variable. This is useful to see how the variables are used and also to identify if there are variables that are unused in the role.","title":"Introduction"},{"location":"#introduction","text":"Ansible-mdgen is a python package used to auto generate documentation for an ansible role. It is a highly configurable tool and uses mdUtils to create the .md files.","title":"Introduction"},{"location":"#how-does-it-work","text":"The package reads all tasks, handlers, defaults, variables, files and templates and produces equivalent .md files in the docs directory of the role. It also allows you to configure it so that you can combine tasks, variables, templates, etc... into single .md files. If the docs directory does not exist then it will be created.","title":"How does it work?"},{"location":"#tasks","text":"The package iterates over each of the tasks files, parsing the yaml to extract the \"name\" values and \"tags\" values from each task and writes it to the .md file. So good descriptions on the task names will lead to better documentation. The package also generates a flow graph based on the include_tasks and import_tasks. This is useful in particular for larger roles to see the picture of how various task files are tied together.","title":"Tasks"},{"location":"#variables","text":"The package iterates over all variables in the defaults and vars directories. To provide descriptions of the variables you can add the \"@var:\" annotation in the comment above the variable: # @var: <variable_name>: <variable_description> For example: # @var: my_var: This is a description of my variable! The package also identifies where the variable is used in the role and this is displayed under the \"Where referenced\" section under each variable. This is useful to see how the variables are used and also to identify if there are variables that are unused in the role.","title":"Variables"},{"location":"appendix/","text":"Appendix References Description Link Pypi - ansible-mdgen https://pypi.org/project/ansible-mdgen/ Source Code https://github.com/murphypetercl/ansible-mdgen Example docs https://murphypetercl.github.io/minio_install/ Example source role https://github.com/murphypetercl/minio_install Author Peter Murphy","title":"Appendix"},{"location":"appendix/#appendix","text":"","title":"Appendix"},{"location":"appendix/#references","text":"Description Link Pypi - ansible-mdgen https://pypi.org/project/ansible-mdgen/ Source Code https://github.com/murphypetercl/ansible-mdgen Example docs https://murphypetercl.github.io/minio_install/ Example source role https://github.com/murphypetercl/minio_install Author Peter Murphy","title":"References"},{"location":"getting-started/","text":"Getting Started To Install Install using pip as follows: pip install ansible-mdgen To run Call ansible-mdgen passing in the path to the role ansible-mdgen <path_to_role> That's it! You should now see a docs directory in your role with all the various md files. To annotate To provide and output variable descriptions add a comment with the var annotation as follows: # @var: <variable_name>: <variable_description> To debug Pass the options -vvv for debugging Next steps As you can tell this ties in nicely with mkdocs. If not done already then create an mkdocs.yml file in the root of your role directory. To view the Tasks flow page correctly you will require the mermaid2 plugin: pip install mkdocs-mermaid2-plugin And add the following plugin to mkdocs.yml plugins: - search - mermaid2 Run the following to serve your docs locally: mkdocs serve See here for more details on mkdocs. Tips I like to use the material theme for displaying my docs similar to the docs you are looking at right now but that is completely an end user choice. Also you may want to option to download the docs as a PDF file. To do that, install the following mkdocs plugin: mkdocs-with-pdf And add the configuration to your mkdocs.yml plugins: - search - mermaid2 - with-pdf: author: Peter Murphy copyright: My Company cover_subtitle: Ansible role to deploy and configure Minio in distributed mode toc_level: 2 Also it helps to add in navigation to display the documentation in the correct order: e.g. nav: - index.md - Defaults: - defaults/main.md - Vars: - variables/main.md - Tasks: - tasks/flow.md - tasks/main.md - tasks/users.md - tasks/file-system.md - tasks/minio.md - Templates: - roletemplates/minio.env.j2.md - roletemplates/minio.init.j2.md - roletemplates/minio.service.j2.md - Handlers: - handlers/main.md - appendix.md","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#to-install","text":"Install using pip as follows: pip install ansible-mdgen","title":"To Install"},{"location":"getting-started/#to-run","text":"Call ansible-mdgen passing in the path to the role ansible-mdgen <path_to_role> That's it! You should now see a docs directory in your role with all the various md files.","title":"To run"},{"location":"getting-started/#to-annotate","text":"To provide and output variable descriptions add a comment with the var annotation as follows: # @var: <variable_name>: <variable_description>","title":"To annotate"},{"location":"getting-started/#to-debug","text":"Pass the options -vvv for debugging","title":"To debug"},{"location":"getting-started/#next-steps","text":"As you can tell this ties in nicely with mkdocs. If not done already then create an mkdocs.yml file in the root of your role directory. To view the Tasks flow page correctly you will require the mermaid2 plugin: pip install mkdocs-mermaid2-plugin And add the following plugin to mkdocs.yml plugins: - search - mermaid2 Run the following to serve your docs locally: mkdocs serve See here for more details on mkdocs.","title":"Next steps"},{"location":"getting-started/#tips","text":"I like to use the material theme for displaying my docs similar to the docs you are looking at right now but that is completely an end user choice. Also you may want to option to download the docs as a PDF file. To do that, install the following mkdocs plugin: mkdocs-with-pdf And add the configuration to your mkdocs.yml plugins: - search - mermaid2 - with-pdf: author: Peter Murphy copyright: My Company cover_subtitle: Ansible role to deploy and configure Minio in distributed mode toc_level: 2 Also it helps to add in navigation to display the documentation in the correct order: e.g. nav: - index.md - Defaults: - defaults/main.md - Vars: - variables/main.md - Tasks: - tasks/flow.md - tasks/main.md - tasks/users.md - tasks/file-system.md - tasks/minio.md - Templates: - roletemplates/minio.env.j2.md - roletemplates/minio.init.j2.md - roletemplates/minio.service.j2.md - Handlers: - handlers/main.md - appendix.md","title":"Tips"},{"location":"configuration/configuration/","text":"Configuration Ansible-mdgen provides alot of configuration options. You can pass some configuration options via the command line but for complete configuration you would create a configuration file called .ansible-mdgen.yml in the root directory of the role. Command Line options Parameter Description --project_dir The directory of the role that you want to document. -C --conf The configuration file you want to use if different to .ansible-mdgen -o Define the destination folder of your documenation -w Clear the output directory without asking -y Overwrite the output without asking --sample-config Print the sample configuration yaml file -V --version Get version Configuration File Parameter Description Default output_dir Directory to output the docs ./docs output_tasks_dir Directory to output the tasks docs relative to output_dir tasks output_handlers_dir Directory to output the handlers docs relative to output_dir handlers output_defaults_dir Directory to output the defaults docs relative to output_dir defaults output_variables_dir Directory to output the variables docs relative to output_dir variables output_files_dir Directory to output the files docs relative to output_dir files output_templates_dir Directory to output the templates docs relative to output_dir roletemplates output_overwrite Determines if you want to overwrite the current docs in the output directory False clear_output Determines if you want to clear all the current docs in the output directory False output_templates Determines if you want to output the templates True output_files Determines if you want to output the files True File Combinations For file combinations see here","title":"Configuration"},{"location":"configuration/configuration/#configuration","text":"Ansible-mdgen provides alot of configuration options. You can pass some configuration options via the command line but for complete configuration you would create a configuration file called .ansible-mdgen.yml in the root directory of the role.","title":"Configuration"},{"location":"configuration/configuration/#command-line-options","text":"Parameter Description --project_dir The directory of the role that you want to document. -C --conf The configuration file you want to use if different to .ansible-mdgen -o Define the destination folder of your documenation -w Clear the output directory without asking -y Overwrite the output without asking --sample-config Print the sample configuration yaml file -V --version Get version","title":"Command Line options"},{"location":"configuration/configuration/#configuration-file","text":"Parameter Description Default output_dir Directory to output the docs ./docs output_tasks_dir Directory to output the tasks docs relative to output_dir tasks output_handlers_dir Directory to output the handlers docs relative to output_dir handlers output_defaults_dir Directory to output the defaults docs relative to output_dir defaults output_variables_dir Directory to output the variables docs relative to output_dir variables output_files_dir Directory to output the files docs relative to output_dir files output_templates_dir Directory to output the templates docs relative to output_dir roletemplates output_overwrite Determines if you want to overwrite the current docs in the output directory False clear_output Determines if you want to clear all the current docs in the output directory False output_templates Determines if you want to output the templates True output_files Determines if you want to output the files True","title":"Configuration File"},{"location":"configuration/configuration/#file-combinations","text":"For file combinations see here","title":"File Combinations"},{"location":"configuration/file-combinations/","text":"File combinations You may not want to produce .md for all your role files. With the combinations configuration you can specify which files to output and also which files you would like to combine. For example you may have several task files but would like to just create one .md file with all the tasks from these files. To do that you would add the following configuration: <file_type>: combinations: - filename: <name_of_file_to_create_1> files_to_combine: - name: <name_of_file_to_include_1> - name: <name_of_file_to_include_2> - name: <name_of_file_to_include_3> - filename: <name_of_file_to_create_2> files_to_combine: - name: <name_of_file_to_include_1> - name: <name_of_file_to_include_2> <file_type> could be tasks, handlers, defaults, variables, files or templates. <name_of_file_to_create_x> is the name of the file that you want to create and includes all the documentation from the <name_of_file_to_include_y> in the files_to_combine list e.g. tasks: combinations: - filename: main files_to_combine: - name: main.yml - filename: users files_to_combine: - name: minio/users.yml - filename: file-system files_to_combine: - name: volumes.yml - name: directories.yml - filename: minio files_to_combine: - name: minio/minio.yml - name: minio/firewall.yml","title":"File combinations"},{"location":"configuration/file-combinations/#file-combinations","text":"You may not want to produce .md for all your role files. With the combinations configuration you can specify which files to output and also which files you would like to combine. For example you may have several task files but would like to just create one .md file with all the tasks from these files. To do that you would add the following configuration: <file_type>: combinations: - filename: <name_of_file_to_create_1> files_to_combine: - name: <name_of_file_to_include_1> - name: <name_of_file_to_include_2> - name: <name_of_file_to_include_3> - filename: <name_of_file_to_create_2> files_to_combine: - name: <name_of_file_to_include_1> - name: <name_of_file_to_include_2> <file_type> could be tasks, handlers, defaults, variables, files or templates. <name_of_file_to_create_x> is the name of the file that you want to create and includes all the documentation from the <name_of_file_to_include_y> in the files_to_combine list e.g. tasks: combinations: - filename: main files_to_combine: - name: main.yml - filename: users files_to_combine: - name: minio/users.yml - filename: file-system files_to_combine: - name: volumes.yml - name: directories.yml - filename: minio files_to_combine: - name: minio/minio.yml - name: minio/firewall.yml","title":"File combinations"}]}